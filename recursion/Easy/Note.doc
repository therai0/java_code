Recursion:
-->In Java, a method that calls itself is known as a recursive method. And, this process is known as recursion. A physical world example would be to place two parallel mirrors facing each other. Any object in between them would be reflected recursively.
When recursion call for infinite times then it create the stack overflow.

Easy-level 
Question:
1)WAP to print the number from 1 to 10 using the recursion function.
public class FiveNum {
    public static void print(int a) {
        
        if(a > 10) {
           return;
        }else {
            System.out.println(a);
            print(a+1);
        }
    }
    public static void main(String argu[]) {
        int a = 1;
        print(a);
    }
}

2) WAP to find the sum of N number.
package Easy;

import java.util.Scanner;

public class SumN {

    public static int sum(int a){
        int sum = 0;
        if(a ==0) {
            return 0;
        }else {
            sum = a + sum(a-1);
            return sum;
        }
    }
    public static void main(String argu[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the any number");
        int n = sc.nextInt();

        int s = sum(n);
        System.out.println("The sum of the enter number is " + s);
        sc.close();
    }
}

3) WAP to find the factorial of N number.

public class Facto {
    public static int Ans(int a) {
        if (a == 0 || a == 1) {
            return 1;
        }
        int fact_n = Ans(a - 1);
        int facto_n = fact_n * a;
        return facto_n;
    }
    public static void main(String argu[]) {
        int n = 5;
        int answer = Ans(n);
        System.out.println("Factorial of " + n + " is " + answer);
    }
}

4)WAP to print the Fibonacci serires upto Nth term.
Concept :1,1,2,3,5,8.....

package Easy;
public class Fibo {

    public static void num(int a,int b ,int n) {
        
        if(n == 0){
            return;
        }
        else { 
        int c = a + b;
        System.out.print(c + " ");
        num(b, c, n-1);
    }
    }
    public static void main(String argu[]) {
       int a = 0, b = 1;
       int n = 10;
       System.out.println(a);
       System.out.println(b);
       num(a, b, n-2);
       //cause already the two number are printed so n-2 we pass
    }
}

5) WAP to print x^n (stack height = n).
--> public class NtheSquare {

    public static int calc(int n, int pw) {

        if (pw == 0) {
            return 1;
        } else if(n == 0) {
            return 0;
        }
        
        else {
            int Xpw = calc(n, pw-1);
            System.out.println("Xpw:" + Xpw);
            int ans = n * Xpw;
            return ans;
        }
    }

    public static void main(String argu[]) {

        int num = 3;
        int power = 5;
        int answer = calc(num, power);
        System.out.println(answer);
    }
}
--->
The given code implements a recursive function called calc that calculates the value of n raised to the power of pw. Here's an explanation of how the code works:

The function calc takes two parameters: n and pw, which represent the base and exponent of the power operation, respectively.

The first conditional statement checks if pw is equal to 0. If it is, the function returns 1. This is the base case of the recursion, as any number raised to the power of 0 is 1.

The second conditional statement checks if n is equal to 0. If it is, the function returns 0. This is another base case that handles the scenario where the base is 0. In this case, no matter what the exponent is, the result will always be 0.

If neither of the base cases is met, the else block is executed. This block performs the recursive calculation.

The function calls itself with the same value of n and pw decremented by 1. This recursive call is assigned to the variable Xpw. Essentially, this step calculates the value of n raised to the power of pw-1.

The result of the previous step, stored in Xpw, is then multiplied by n to calculate the value of n raised to the power of pw. The result is stored in the variable ans.

Finally, the value of ans is returned as the result of the calc function.

The recursion works by breaking down the problem of calculating n raised to the power of pw into smaller subproblems. In each recursive call, the exponent pw is reduced by 1, bringing the problem closer to the base case. The recursive calls continue until pw reaches 0, at which point the base case is triggered and the recursion unwinds, returning the final result.



6) WAP to print x^n (stack height = logn).

class LogXjava {

    public static int calc(int n, int pw) {

        if (pw == 0) {
            return 1;
        } else if (n == 0) {
            return 0;
        } else {
            if (pw % 2 == 0) {
            return calc(n, pw / 2) * calc(n, pw / 2);
            } else {
            return calc(n, pw / 2) * calc(n, pw / 2) * n;
            }
        }
    }
    public static void main(String argu[]) {
        int num = 2;
        int power = 5;
        int answer = calc(num, power);
        System.out.println(answer);
    }
}


